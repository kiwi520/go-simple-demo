package jobs

import (
	"net/http"
	"strings"
	"io/ioutil"
	//"fmt"
	"encoding/json"
	_ "github.com/go-sql-driver/mysql"
	"time"
	"database/sql"
	"strconv"
)
func Canyonfreepark()  {
	var b = `"1=1"`

	client := &http.Client{}

	req, err := http.NewRequest("POST", "http://123.132.229.198:60009/api/Park/GetByFunc", strings.NewReader(b))
	if err != nil {
		// handle error
	}

	req.Header.Set("Content-Type", "application/json;charset=utf-8")
	// req.Header.Set("Host","123.132.229.198:60009")
	resp, err := client.Do(req)

	defer resp.Body.Close()

	//body, err := ioutil.ReadAll(resp.Body)
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// handle error
	}

	type State struct {
		IsSucess       bool        `json:"IsSucess"`
		IsError        bool        `json:"IsError"`
		Code           int         `json:"Code"`
		RecordAffected int         `json:"RecordAffected"`
		Describe       interface{} `json:"Describe"`
	}

	type Model struct {
		ID       int    `json:"ID"`
		Name     string `json:"Name"`
		LotCount int    `json:"LotCount"`
		LotFree  int    `json:"LotFree"`
		ParentNo string `json:"ParentNo"`
		Remark   string `json:"Remark"`
		Gid      string `json:"Gid"`
		Rid      string `json:"Rid"`
	}
	type AutoGenerated struct {
		State  State
		//Models Models
		Model  Model
	}

	var JsonPark AutoGenerated


	json.Unmarshal([]byte(body), &JsonPark)


    //声明一个map暂存数据
	data := make(map[string]string)

	if JsonPark.Model.Name != "" {
		data["name"] = JsonPark.Model.Name
	}

	if JsonPark.Model.LotCount != 0 {
		data["lot_count"] = strconv.Itoa(JsonPark.Model.LotCount)
	}

	if JsonPark.Model.LotFree != 0 {
		data["lot_free"] = strconv.Itoa(JsonPark.Model.LotFree)
	}

	if JsonPark.Model.ParentNo != "" {
		data["parent_id"] = JsonPark.Model.ParentNo
	}

	if JsonPark.Model.Name != "" {
		data["remark"] = JsonPark.Model.Remark
	}else{
		data["remark"] = ""
	}

	if JsonPark.Model.Rid != "" {
		data["rid"] = JsonPark.Model.Rid
	}
	if JsonPark.Model.Gid != "" {
		data["gid"] = JsonPark.Model.Gid
	}

	var lot_count_int , lot_count_error = strconv.Atoi(data["lot_count"])
	if lot_count_error != nil {
		panic(lot_count_error.Error())
	}


	var lot_free_int , lot_free_err = strconv.Atoi(data["lot_free"])
	if lot_free_err != nil {
		panic(lot_free_err.Error())
	}

	//db , err := sql.Open("mysql", "homestead:secret@tcp(192.168.13.106:3306)/tour_canyon_park?charset=utf8")
	db , err := sql.Open("mysql", "root:root@tcp(192.168.1.133:3306)/tour_canyon_park?charset=utf8")
	if err != nil {
		panic(err.Error())
	}

	//插入数据
	stmt, err := db.Prepare("INSERT tour_surplus_park SET name=?,lot_count=?,lot_free=?,parent_id=?,remark=?,gid=?,rid=?,create_time=?")
	checkErr(err)
	t := time.Now();
	res, err := stmt.Exec(data["name"],lot_count_int,lot_free_int,data["parent_id"],data["remark"],data["gid"],data["rid"],t.Unix())

	if err != nil {
		panic(err.Error())
	}

	db.Close()
     _ = res
    //fmt.Println(res)
}


func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}
